<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Jogo do Moinho</title>
    <style>
        #board {
            position: relative;
            width: 800px;
            height: 750px;
            margin: 30px auto;
            background-color: rgb(239, 221, 170);
        }

        .cell {
            position: absolute;
            width: 30px;
            height: 30px;
            border-radius: 50%;
            background-color: rgb(3, 5, 46);
            border: 2px solid black;
            display: flex;
            justify-content: center;
            align-items: center;
            cursor: pointer;
            z-index: 2;
        }

        svg {
            position: absolute;
            top: 0;
            left: 0;
            z-index: 1;
        }
    </style>
</head>
<body>

    <div>
        <label for="numSquares">Número de Quadrados: </label>
        <input type="number" id="numSquares" value="3" min="1" max="10">
        <button onclick="generateBoardFromInput()">Gerar Tabuleiro</button>
    </div>

    <div id="board">
        <svg id="svg-lines" width="800" height="750"></svg>
    </div>

    <script>
        function generateBoardFromInput() {
            const numSquares = document.getElementById('numSquares').value;
            generateBoard(Number(numSquares));
        }

        function generateBoard(numSquares) {
            const boardElement = document.getElementById('board');
            const svg = document.getElementById('svg-lines');

            // Limpa o conteúdo anterior
            boardElement.innerHTML = '<svg id="svg-lines" width="800" height="750"></svg>';
            
            const boardCenter = 400;
            const maxRadius = 300;
            const allPositions = [];

            for (let square = 0; square < numSquares; square++) {
                const radius = maxRadius - (square * (maxRadius / numSquares));
                const positions = calculatePositions(radius);

                positions.forEach((pos, index) => {
                    createCircle(boardElement, boardCenter + pos.x, boardCenter + pos.y, `cell-${square}-${index}`);
                });

                allPositions.push(positions);

                for (let i = 0; i < positions.length; i++) {
                    const nextPos = positions[(i + 1) % positions.length]; 
                    createLine(svg, boardCenter + positions[i].x, boardCenter + positions[i].y, boardCenter + nextPos.x, boardCenter + nextPos.y);
                }
            }

            // Adiciona linhas horizontais e verticais
            for (let square = 0; square < numSquares; square++) {
                const positions = allPositions[square];

                // Linhas verticais
                createLine(svg, boardCenter + positions[0].x, boardCenter + positions[0].y, boardCenter + positions[5].x, boardCenter + positions[5].y);
                createLine(svg, boardCenter + positions[2].x, boardCenter + positions[2].y, boardCenter + positions[7].x, boardCenter + positions[7].y);

                // Linhas horizontais
                createLine(svg, boardCenter + positions[1].x, boardCenter + positions[1].y, boardCenter + positions[4].x, boardCenter + positions[4].y);
                createLine(svg, boardCenter + positions[3].x, boardCenter + positions[3].y, boardCenter + positions[6].x, boardCenter + positions[6].y);
            }
        }

        function calculatePositions(radius) {
            return [
                { x: -radius, y: -radius },
                { x: 0, y: -radius },
                { x: radius, y: -radius },
                { x: radius, y: 0 },
                { x: radius, y: radius },
                { x: 0, y: radius },
                { x: -radius, y: radius },
                { x: -radius, y: 0 }
            ];
        }

        function createCircle(boardElement, x, y, id) {
            const cell = document.createElement('div');
            cell.classList.add('cell');
            cell.style.left = `${x - 15}px`;
            cell.style.top = `${y - 15}px`;
            cell.id = id;
            cell.addEventListener('click', () => handleCellClick(cell));
            boardElement.appendChild(cell);
        }

        function createLine(svg, x1, y1, x2, y2) {
            const line = document.createElementNS("http://www.w3.org/2000/svg", "line");
            line.setAttribute("x1", x1);
            line.setAttribute("y1", y1);
            line.setAttribute("x2", x2);
            line.setAttribute("y2", y2);
            line.setAttribute("stroke", "black");
            line.setAttribute("stroke-width", "4");

            svg.appendChild(line);
        }

        function handleCellClick(cell) {
            console.log(`Célula clicada: ${cell.id}`);
            cell.style.backgroundColor = 'lightblue';
        }
    </script>

</body>
</html>
